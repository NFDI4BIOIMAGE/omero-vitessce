{"version":3,"file":"static/js/132.26347ec2.chunk.js","mappings":"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","sources":["../node_modules/vitessce/dist/lerc-b2248e39.js"],"sourcesContent":["import { i as te } from \"./pako.esm-a0be47a3.js\";\nimport { g as se, aQ as le, aR as oe, aS as re } from \"./index-f27da675.js\";\nimport \"react\";\nimport \"react-dom\";\nvar ie = { exports: {} };\n(function($) {\n  /* Copyright 2015-2021 Esri. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 @preserve */\n  (function() {\n    var Y = function() {\n      var F = {};\n      F.defaultNoDataValue = -34027999387901484e22, F.decode = function(r, o) {\n        o = o || {};\n        var a = o.encodedMaskData || o.encodedMaskData === null, i = t(r, o.inputOffset || 0, a), h = o.noDataValue !== null ? o.noDataValue : F.defaultNoDataValue, n = A(\n          i,\n          o.pixelType || Float32Array,\n          o.encodedMaskData,\n          h,\n          o.returnMask\n        ), f = {\n          width: i.width,\n          height: i.height,\n          pixelData: n.resultPixels,\n          minValue: n.minValue,\n          maxValue: i.pixels.maxValue,\n          noDataValue: h\n        };\n        return n.resultMask && (f.maskData = n.resultMask), o.returnEncodedMask && i.mask && (f.encodedMaskData = i.mask.bitset ? i.mask.bitset : null), o.returnFileInfo && (f.fileInfo = X(i), o.computeUsedBitDepths && (f.fileInfo.bitDepths = R(i))), f;\n      };\n      var A = function(r, o, a, i, h) {\n        var n = 0, f = r.pixels.numBlocksX, v = r.pixels.numBlocksY, u = Math.floor(r.width / f), m = Math.floor(r.height / v), g = 2 * r.maxZError, l = Number.MAX_VALUE, s;\n        a = a || (r.mask ? r.mask.bitset : null);\n        var w, k;\n        w = new o(r.width * r.height), h && a && (k = new Uint8Array(r.width * r.height));\n        for (var D = new Float32Array(u * m), d, y, x = 0; x <= v; x++) {\n          var L = x !== v ? m : r.height % v;\n          if (L !== 0)\n            for (var p = 0; p <= f; p++) {\n              var c = p !== f ? u : r.width % f;\n              if (c !== 0) {\n                var U = x * r.width * m + p * u, I = r.width - c, M = r.pixels.blocks[n], T, V, S;\n                M.encoding < 2 ? (M.encoding === 0 ? T = M.rawData : (e(M.stuffedData, M.bitsPerPixel, M.numValidPixels, M.offset, g, D, r.pixels.maxValue), T = D), V = 0) : M.encoding === 2 ? S = 0 : S = M.offset;\n                var B;\n                if (a)\n                  for (y = 0; y < L; y++) {\n                    for (U & 7 && (B = a[U >> 3], B <<= U & 7), d = 0; d < c; d++)\n                      U & 7 || (B = a[U >> 3]), B & 128 ? (k && (k[U] = 1), s = M.encoding < 2 ? T[V++] : S, l = l > s ? s : l, w[U++] = s) : (k && (k[U] = 0), w[U++] = i), B <<= 1;\n                    U += I;\n                  }\n                else if (M.encoding < 2)\n                  for (y = 0; y < L; y++) {\n                    for (d = 0; d < c; d++)\n                      s = T[V++], l = l > s ? s : l, w[U++] = s;\n                    U += I;\n                  }\n                else\n                  for (l = l > S ? S : l, y = 0; y < L; y++) {\n                    for (d = 0; d < c; d++)\n                      w[U++] = S;\n                    U += I;\n                  }\n                if (M.encoding === 1 && V !== M.numValidPixels)\n                  throw \"Block and Mask do not match\";\n                n++;\n              }\n            }\n        }\n        return {\n          resultPixels: w,\n          resultMask: k,\n          minValue: l\n        };\n      }, X = function(r) {\n        return {\n          fileIdentifierString: r.fileIdentifierString,\n          fileVersion: r.fileVersion,\n          imageType: r.imageType,\n          height: r.height,\n          width: r.width,\n          maxZError: r.maxZError,\n          eofOffset: r.eofOffset,\n          mask: r.mask ? {\n            numBlocksX: r.mask.numBlocksX,\n            numBlocksY: r.mask.numBlocksY,\n            numBytes: r.mask.numBytes,\n            maxValue: r.mask.maxValue\n          } : null,\n          pixels: {\n            numBlocksX: r.pixels.numBlocksX,\n            numBlocksY: r.pixels.numBlocksY,\n            numBytes: r.pixels.numBytes,\n            maxValue: r.pixels.maxValue,\n            noDataValue: r.noDataValue\n          }\n        };\n      }, R = function(r) {\n        for (var o = r.pixels.numBlocksX * r.pixels.numBlocksY, a = {}, i = 0; i < o; i++) {\n          var h = r.pixels.blocks[i];\n          h.encoding === 0 ? a.float32 = !0 : h.encoding === 1 ? a[h.bitsPerPixel] = !0 : a[0] = !0;\n        }\n        return Object.keys(a);\n      }, t = function(r, o, a) {\n        var i = {}, h = new Uint8Array(r, o, 10);\n        if (i.fileIdentifierString = String.fromCharCode.apply(null, h), i.fileIdentifierString.trim() !== \"CntZImage\")\n          throw \"Unexpected file identifier string: \" + i.fileIdentifierString;\n        o += 10;\n        var n = new DataView(r, o, 24);\n        if (i.fileVersion = n.getInt32(0, !0), i.imageType = n.getInt32(4, !0), i.height = n.getUint32(8, !0), i.width = n.getUint32(12, !0), i.maxZError = n.getFloat64(16, !0), o += 24, !a)\n          if (n = new DataView(r, o, 16), i.mask = {}, i.mask.numBlocksY = n.getUint32(0, !0), i.mask.numBlocksX = n.getUint32(4, !0), i.mask.numBytes = n.getUint32(8, !0), i.mask.maxValue = n.getFloat32(12, !0), o += 16, i.mask.numBytes > 0) {\n            var f = new Uint8Array(Math.ceil(i.width * i.height / 8));\n            n = new DataView(r, o, i.mask.numBytes);\n            var v = n.getInt16(0, !0), u = 2, m = 0;\n            do {\n              if (v > 0)\n                for (; v--; )\n                  f[m++] = n.getUint8(u++);\n              else {\n                var g = n.getUint8(u++);\n                for (v = -v; v--; )\n                  f[m++] = g;\n              }\n              v = n.getInt16(u, !0), u += 2;\n            } while (u < i.mask.numBytes);\n            if (v !== -32768 || m < f.length)\n              throw \"Unexpected end of mask RLE encoding\";\n            i.mask.bitset = f, o += i.mask.numBytes;\n          } else\n            i.mask.numBytes | i.mask.numBlocksY | i.mask.maxValue || (i.mask.bitset = new Uint8Array(Math.ceil(i.width * i.height / 8)));\n        n = new DataView(r, o, 16), i.pixels = {}, i.pixels.numBlocksY = n.getUint32(0, !0), i.pixels.numBlocksX = n.getUint32(4, !0), i.pixels.numBytes = n.getUint32(8, !0), i.pixels.maxValue = n.getFloat32(12, !0), o += 16;\n        var l = i.pixels.numBlocksX, s = i.pixels.numBlocksY, w = l + (i.width % l > 0 ? 1 : 0), k = s + (i.height % s > 0 ? 1 : 0);\n        i.pixels.blocks = new Array(w * k);\n        for (var D = 0, d = 0; d < k; d++)\n          for (var y = 0; y < w; y++) {\n            var x = 0, L = r.byteLength - o;\n            n = new DataView(r, o, Math.min(10, L));\n            var p = {};\n            i.pixels.blocks[D++] = p;\n            var c = n.getUint8(0);\n            if (x++, p.encoding = c & 63, p.encoding > 3)\n              throw \"Invalid block encoding (\" + p.encoding + \")\";\n            if (p.encoding === 2) {\n              o++;\n              continue;\n            }\n            if (c !== 0 && c !== 2) {\n              if (c >>= 6, p.offsetType = c, c === 2)\n                p.offset = n.getInt8(1), x++;\n              else if (c === 1)\n                p.offset = n.getInt16(1, !0), x += 2;\n              else if (c === 0)\n                p.offset = n.getFloat32(1, !0), x += 4;\n              else\n                throw \"Invalid block offset type\";\n              if (p.encoding === 1)\n                if (c = n.getUint8(x), x++, p.bitsPerPixel = c & 63, c >>= 6, p.numValidPixelsType = c, c === 2)\n                  p.numValidPixels = n.getUint8(x), x++;\n                else if (c === 1)\n                  p.numValidPixels = n.getUint16(x, !0), x += 2;\n                else if (c === 0)\n                  p.numValidPixels = n.getUint32(x, !0), x += 4;\n                else\n                  throw \"Invalid valid pixel count type\";\n            }\n            if (o += x, p.encoding !== 3) {\n              var U, I;\n              if (p.encoding === 0) {\n                var M = (i.pixels.numBytes - 1) / 4;\n                if (M !== Math.floor(M))\n                  throw \"uncompressed block has invalid length\";\n                U = new ArrayBuffer(M * 4), I = new Uint8Array(U), I.set(new Uint8Array(r, o, M * 4));\n                var T = new Float32Array(U);\n                p.rawData = T, o += M * 4;\n              } else if (p.encoding === 1) {\n                var V = Math.ceil(p.numValidPixels * p.bitsPerPixel / 8), S = Math.ceil(V / 4);\n                U = new ArrayBuffer(S * 4), I = new Uint8Array(U), I.set(new Uint8Array(r, o, V)), p.stuffedData = new Uint32Array(U), o += V;\n              }\n            }\n          }\n        return i.eofOffset = o, i;\n      }, e = function(r, o, a, i, h, n, f) {\n        var v = (1 << o) - 1, u = 0, m, g = 0, l, s, w = Math.ceil((f - i) / h), k = r.length * 4 - Math.ceil(o * a / 8);\n        for (r[r.length - 1] <<= 8 * k, m = 0; m < a; m++) {\n          if (g === 0 && (s = r[u++], g = 32), g >= o)\n            l = s >>> g - o & v, g -= o;\n          else {\n            var D = o - g;\n            l = (s & v) << D & v, s = r[u++], g = 32 - D, l += s >>> g;\n          }\n          n[m] = l < w ? i + l * h : f;\n        }\n        return n;\n      };\n      return F;\n    }(), K = function() {\n      var F = {\n        //methods ending with 2 are for the new byte order used by Lerc2.3 and above.\n        //originalUnstuff is used to unpack Huffman code table. code is duplicated to unstuffx for performance reasons.\n        unstuff: function(t, e, r, o, a, i, h, n) {\n          var f = (1 << r) - 1, v = 0, u, m = 0, g, l, s, w, k = t.length * 4 - Math.ceil(r * o / 8);\n          if (t[t.length - 1] <<= 8 * k, a)\n            for (u = 0; u < o; u++)\n              m === 0 && (l = t[v++], m = 32), m >= r ? (g = l >>> m - r & f, m -= r) : (s = r - m, g = (l & f) << s & f, l = t[v++], m = 32 - s, g += l >>> m), e[u] = a[g];\n          else\n            for (w = Math.ceil((n - i) / h), u = 0; u < o; u++)\n              m === 0 && (l = t[v++], m = 32), m >= r ? (g = l >>> m - r & f, m -= r) : (s = r - m, g = (l & f) << s & f, l = t[v++], m = 32 - s, g += l >>> m), e[u] = g < w ? i + g * h : n;\n        },\n        unstuffLUT: function(t, e, r, o, a, i) {\n          var h = (1 << e) - 1, n = 0, f = 0, v = 0, u = 0, m = 0, g, l = [], s = t.length * 4 - Math.ceil(e * r / 8);\n          t[t.length - 1] <<= 8 * s;\n          var w = Math.ceil((i - o) / a);\n          for (f = 0; f < r; f++)\n            u === 0 && (g = t[n++], u = 32), u >= e ? (m = g >>> u - e & h, u -= e) : (v = e - u, m = (g & h) << v & h, g = t[n++], u = 32 - v, m += g >>> u), l[f] = m < w ? o + m * a : i;\n          return l.unshift(o), l;\n        },\n        unstuff2: function(t, e, r, o, a, i, h, n) {\n          var f = (1 << r) - 1, v = 0, u, m = 0, g = 0, l, s, w;\n          if (a)\n            for (u = 0; u < o; u++)\n              m === 0 && (s = t[v++], m = 32, g = 0), m >= r ? (l = s >>> g & f, m -= r, g += r) : (w = r - m, l = s >>> g & f, s = t[v++], m = 32 - w, l |= (s & (1 << w) - 1) << r - w, g = w), e[u] = a[l];\n          else {\n            var k = Math.ceil((n - i) / h);\n            for (u = 0; u < o; u++)\n              m === 0 && (s = t[v++], m = 32, g = 0), m >= r ? (l = s >>> g & f, m -= r, g += r) : (w = r - m, l = s >>> g & f, s = t[v++], m = 32 - w, l |= (s & (1 << w) - 1) << r - w, g = w), e[u] = l < k ? i + l * h : n;\n          }\n          return e;\n        },\n        unstuffLUT2: function(t, e, r, o, a, i) {\n          var h = (1 << e) - 1, n = 0, f = 0, v = 0, u = 0, m = 0, g = 0, l, s = [], w = Math.ceil((i - o) / a);\n          for (f = 0; f < r; f++)\n            u === 0 && (l = t[n++], u = 32, g = 0), u >= e ? (m = l >>> g & h, u -= e, g += e) : (v = e - u, m = l >>> g & h, l = t[n++], u = 32 - v, m |= (l & (1 << v) - 1) << e - v, g = v), s[f] = m < w ? o + m * a : i;\n          return s.unshift(o), s;\n        },\n        originalUnstuff: function(t, e, r, o) {\n          var a = (1 << r) - 1, i = 0, h, n = 0, f, v, u, m = t.length * 4 - Math.ceil(r * o / 8);\n          for (t[t.length - 1] <<= 8 * m, h = 0; h < o; h++)\n            n === 0 && (v = t[i++], n = 32), n >= r ? (f = v >>> n - r & a, n -= r) : (u = r - n, f = (v & a) << u & a, v = t[i++], n = 32 - u, f += v >>> n), e[h] = f;\n          return e;\n        },\n        originalUnstuff2: function(t, e, r, o) {\n          var a = (1 << r) - 1, i = 0, h, n = 0, f = 0, v, u, m;\n          for (h = 0; h < o; h++)\n            n === 0 && (u = t[i++], n = 32, f = 0), n >= r ? (v = u >>> f & a, n -= r, f += r) : (m = r - n, v = u >>> f & a, u = t[i++], n = 32 - m, v |= (u & (1 << m) - 1) << r - m, f = m), e[h] = v;\n          return e;\n        }\n      }, A = {\n        HUFFMAN_LUT_BITS_MAX: 12,\n        //use 2^12 lut, treat it like constant\n        computeChecksumFletcher32: function(t) {\n          for (var e = 65535, r = 65535, o = t.length, a = Math.floor(o / 2), i = 0; a; ) {\n            var h = a >= 359 ? 359 : a;\n            a -= h;\n            do\n              e += t[i++] << 8, r += e += t[i++];\n            while (--h);\n            e = (e & 65535) + (e >>> 16), r = (r & 65535) + (r >>> 16);\n          }\n          return o & 1 && (r += e += t[i] << 8), e = (e & 65535) + (e >>> 16), r = (r & 65535) + (r >>> 16), (r << 16 | e) >>> 0;\n        },\n        readHeaderInfo: function(t, e) {\n          var r = e.ptr, o = new Uint8Array(t, r, 6), a = {};\n          if (a.fileIdentifierString = String.fromCharCode.apply(null, o), a.fileIdentifierString.lastIndexOf(\"Lerc2\", 0) !== 0)\n            throw \"Unexpected file identifier string (expect Lerc2 ): \" + a.fileIdentifierString;\n          r += 6;\n          var i = new DataView(t, r, 8), h = i.getInt32(0, !0);\n          a.fileVersion = h, r += 4, h >= 3 && (a.checksum = i.getUint32(4, !0), r += 4), i = new DataView(t, r, 12), a.height = i.getUint32(0, !0), a.width = i.getUint32(4, !0), r += 8, h >= 4 ? (a.numDims = i.getUint32(8, !0), r += 4) : a.numDims = 1, i = new DataView(t, r, 40), a.numValidPixel = i.getUint32(0, !0), a.microBlockSize = i.getInt32(4, !0), a.blobSize = i.getInt32(8, !0), a.imageType = i.getInt32(12, !0), a.maxZError = i.getFloat64(16, !0), a.zMin = i.getFloat64(24, !0), a.zMax = i.getFloat64(32, !0), r += 40, e.headerInfo = a, e.ptr = r;\n          var n, f;\n          if (h >= 3 && (f = h >= 4 ? 52 : 48, n = this.computeChecksumFletcher32(new Uint8Array(t, r - f, a.blobSize - 14)), n !== a.checksum))\n            throw \"Checksum failed.\";\n          return !0;\n        },\n        checkMinMaxRanges: function(t, e) {\n          var r = e.headerInfo, o = this.getDataTypeArray(r.imageType), a = r.numDims * this.getDataTypeSize(r.imageType), i = this.readSubArray(t, e.ptr, o, a), h = this.readSubArray(t, e.ptr + a, o, a);\n          e.ptr += 2 * a;\n          var n, f = !0;\n          for (n = 0; n < r.numDims; n++)\n            if (i[n] !== h[n]) {\n              f = !1;\n              break;\n            }\n          return r.minValues = i, r.maxValues = h, f;\n        },\n        readSubArray: function(t, e, r, o) {\n          var a;\n          if (r === Uint8Array)\n            a = new Uint8Array(t, e, o);\n          else {\n            var i = new ArrayBuffer(o), h = new Uint8Array(i);\n            h.set(new Uint8Array(t, e, o)), a = new r(i);\n          }\n          return a;\n        },\n        readMask: function(t, e) {\n          var r = e.ptr, o = e.headerInfo, a = o.width * o.height, i = o.numValidPixel, h = new DataView(t, r, 4), n = {};\n          if (n.numBytes = h.getUint32(0, !0), r += 4, (i === 0 || a === i) && n.numBytes !== 0)\n            throw \"invalid mask\";\n          var f, v;\n          if (i === 0)\n            f = new Uint8Array(Math.ceil(a / 8)), n.bitset = f, v = new Uint8Array(a), e.pixels.resultMask = v, r += n.numBytes;\n          else if (n.numBytes > 0) {\n            f = new Uint8Array(Math.ceil(a / 8)), h = new DataView(t, r, n.numBytes);\n            var u = h.getInt16(0, !0), m = 2, g = 0, l = 0;\n            do {\n              if (u > 0)\n                for (; u--; )\n                  f[g++] = h.getUint8(m++);\n              else\n                for (l = h.getUint8(m++), u = -u; u--; )\n                  f[g++] = l;\n              u = h.getInt16(m, !0), m += 2;\n            } while (m < n.numBytes);\n            if (u !== -32768 || g < f.length)\n              throw \"Unexpected end of mask RLE encoding\";\n            v = new Uint8Array(a);\n            var s = 0, w = 0;\n            for (w = 0; w < a; w++)\n              w & 7 ? (s = f[w >> 3], s <<= w & 7) : s = f[w >> 3], s & 128 && (v[w] = 1);\n            e.pixels.resultMask = v, n.bitset = f, r += n.numBytes;\n          }\n          return e.ptr = r, e.mask = n, !0;\n        },\n        readDataOneSweep: function(t, e, r, o) {\n          var a = e.ptr, i = e.headerInfo, h = i.numDims, n = i.width * i.height, f = i.imageType, v = i.numValidPixel * A.getDataTypeSize(f) * h, u, m = e.pixels.resultMask;\n          if (r === Uint8Array)\n            u = new Uint8Array(t, a, v);\n          else {\n            var g = new ArrayBuffer(v), l = new Uint8Array(g);\n            l.set(new Uint8Array(t, a, v)), u = new r(g);\n          }\n          if (u.length === n * h)\n            o ? e.pixels.resultPixels = A.swapDimensionOrder(u, n, h, r, !0) : e.pixels.resultPixels = u;\n          else {\n            e.pixels.resultPixels = new r(n * h);\n            var s = 0, w = 0, k = 0, D = 0;\n            if (h > 1) {\n              if (o) {\n                for (w = 0; w < n; w++)\n                  if (m[w])\n                    for (D = w, k = 0; k < h; k++, D += n)\n                      e.pixels.resultPixels[D] = u[s++];\n              } else\n                for (w = 0; w < n; w++)\n                  if (m[w])\n                    for (D = w * h, k = 0; k < h; k++)\n                      e.pixels.resultPixels[D + k] = u[s++];\n            } else\n              for (w = 0; w < n; w++)\n                m[w] && (e.pixels.resultPixels[w] = u[s++]);\n          }\n          return a += v, e.ptr = a, !0;\n        },\n        readHuffmanTree: function(t, e) {\n          var r = this.HUFFMAN_LUT_BITS_MAX, o = new DataView(t, e.ptr, 16);\n          e.ptr += 16;\n          var a = o.getInt32(0, !0);\n          if (a < 2)\n            throw \"unsupported Huffman version\";\n          var i = o.getInt32(4, !0), h = o.getInt32(8, !0), n = o.getInt32(12, !0);\n          if (h >= n)\n            return !1;\n          var f = new Uint32Array(n - h);\n          A.decodeBits(t, e, f);\n          var v = [], u, m, g, l;\n          for (u = h; u < n; u++)\n            m = u - (u < i ? 0 : i), v[m] = { first: f[u - h], second: null };\n          var s = t.byteLength - e.ptr, w = Math.ceil(s / 4), k = new ArrayBuffer(w * 4), D = new Uint8Array(k);\n          D.set(new Uint8Array(t, e.ptr, s));\n          var d = new Uint32Array(k), y = 0, x, L = 0;\n          for (x = d[0], u = h; u < n; u++)\n            m = u - (u < i ? 0 : i), l = v[m].first, l > 0 && (v[m].second = x << y >>> 32 - l, 32 - y >= l ? (y += l, y === 32 && (y = 0, L++, x = d[L])) : (y += l - 32, L++, x = d[L], v[m].second |= x >>> 32 - y));\n          var p = 0, c = 0, U = new X();\n          for (u = 0; u < v.length; u++)\n            v[u] !== void 0 && (p = Math.max(p, v[u].first));\n          p >= r ? c = r : c = p;\n          var I = [], M, T, V, S, B, C;\n          for (u = h; u < n; u++)\n            if (m = u - (u < i ? 0 : i), l = v[m].first, l > 0)\n              if (M = [l, m], l <= c)\n                for (T = v[m].second << c - l, V = 1 << c - l, g = 0; g < V; g++)\n                  I[T | g] = M;\n              else\n                for (T = v[m].second, C = U, S = l - 1; S >= 0; S--)\n                  B = T >>> S & 1, B ? (C.right || (C.right = new X()), C = C.right) : (C.left || (C.left = new X()), C = C.left), S === 0 && !C.val && (C.val = M[1]);\n          return {\n            decodeLut: I,\n            numBitsLUTQick: c,\n            numBitsLUT: p,\n            tree: U,\n            stuffedData: d,\n            srcPtr: L,\n            bitPos: y\n          };\n        },\n        readHuffman: function(t, e, r, o) {\n          var a = e.headerInfo, i = a.numDims, h = e.headerInfo.height, n = e.headerInfo.width, f = n * h, v = this.readHuffmanTree(t, e), u = v.decodeLut, m = v.tree, g = v.stuffedData, l = v.srcPtr, s = v.bitPos, w = v.numBitsLUTQick, k = v.numBitsLUT, D = e.headerInfo.imageType === 0 ? 128 : 0, d, y, x, L = e.pixels.resultMask, p, c, U, I, M, T, V, S = 0;\n          s > 0 && (l++, s = 0);\n          var B = g[l], C = e.encodeMode === 1, j = new r(f * i), O = j, b;\n          if (i < 2 || C) {\n            for (b = 0; b < i; b++)\n              if (i > 1 && (O = new r(j.buffer, f * b, f), S = 0), e.headerInfo.numValidPixel === n * h)\n                for (T = 0, I = 0; I < h; I++)\n                  for (M = 0; M < n; M++, T++) {\n                    if (y = 0, p = B << s >>> 32 - w, c = p, 32 - s < w && (p |= g[l + 1] >>> 64 - s - w, c = p), u[c])\n                      y = u[c][1], s += u[c][0];\n                    else\n                      for (p = B << s >>> 32 - k, c = p, 32 - s < k && (p |= g[l + 1] >>> 64 - s - k, c = p), d = m, V = 0; V < k; V++)\n                        if (U = p >>> k - V - 1 & 1, d = U ? d.right : d.left, !(d.left || d.right)) {\n                          y = d.val, s = s + V + 1;\n                          break;\n                        }\n                    s >= 32 && (s -= 32, l++, B = g[l]), x = y - D, C ? (M > 0 ? x += S : I > 0 ? x += O[T - n] : x += S, x &= 255, O[T] = x, S = x) : O[T] = x;\n                  }\n              else\n                for (T = 0, I = 0; I < h; I++)\n                  for (M = 0; M < n; M++, T++)\n                    if (L[T]) {\n                      if (y = 0, p = B << s >>> 32 - w, c = p, 32 - s < w && (p |= g[l + 1] >>> 64 - s - w, c = p), u[c])\n                        y = u[c][1], s += u[c][0];\n                      else\n                        for (p = B << s >>> 32 - k, c = p, 32 - s < k && (p |= g[l + 1] >>> 64 - s - k, c = p), d = m, V = 0; V < k; V++)\n                          if (U = p >>> k - V - 1 & 1, d = U ? d.right : d.left, !(d.left || d.right)) {\n                            y = d.val, s = s + V + 1;\n                            break;\n                          }\n                      s >= 32 && (s -= 32, l++, B = g[l]), x = y - D, C ? (M > 0 && L[T - 1] ? x += S : I > 0 && L[T - n] ? x += O[T - n] : x += S, x &= 255, O[T] = x, S = x) : O[T] = x;\n                    }\n          } else\n            for (T = 0, I = 0; I < h; I++)\n              for (M = 0; M < n; M++)\n                if (T = I * n + M, !L || L[T])\n                  for (b = 0; b < i; b++, T += f) {\n                    if (y = 0, p = B << s >>> 32 - w, c = p, 32 - s < w && (p |= g[l + 1] >>> 64 - s - w, c = p), u[c])\n                      y = u[c][1], s += u[c][0];\n                    else\n                      for (p = B << s >>> 32 - k, c = p, 32 - s < k && (p |= g[l + 1] >>> 64 - s - k, c = p), d = m, V = 0; V < k; V++)\n                        if (U = p >>> k - V - 1 & 1, d = U ? d.right : d.left, !(d.left || d.right)) {\n                          y = d.val, s = s + V + 1;\n                          break;\n                        }\n                    s >= 32 && (s -= 32, l++, B = g[l]), x = y - D, O[T] = x;\n                  }\n          e.ptr = e.ptr + (l + 1) * 4 + (s > 0 ? 4 : 0), e.pixels.resultPixels = j, i > 1 && !o && (e.pixels.resultPixels = A.swapDimensionOrder(j, f, i, r));\n        },\n        decodeBits: function(t, e, r, o, a) {\n          {\n            var i = e.headerInfo, h = i.fileVersion, n = 0, f = t.byteLength - e.ptr >= 5 ? 5 : t.byteLength - e.ptr, v = new DataView(t, e.ptr, f), u = v.getUint8(0);\n            n++;\n            var m = u >> 6, g = m === 0 ? 4 : 3 - m, l = (u & 32) > 0, s = u & 31, w = 0;\n            if (g === 1)\n              w = v.getUint8(n), n++;\n            else if (g === 2)\n              w = v.getUint16(n, !0), n += 2;\n            else if (g === 4)\n              w = v.getUint32(n, !0), n += 4;\n            else\n              throw \"Invalid valid pixel count type\";\n            var k = 2 * i.maxZError, D, d, y, x, L, p, c, U, I, M = i.numDims > 1 ? i.maxValues[a] : i.zMax;\n            if (l) {\n              for (e.counter.lut++, U = v.getUint8(n), n++, x = Math.ceil((U - 1) * s / 8), L = Math.ceil(x / 4), d = new ArrayBuffer(L * 4), y = new Uint8Array(d), e.ptr += n, y.set(new Uint8Array(t, e.ptr, x)), c = new Uint32Array(d), e.ptr += x, I = 0; U - 1 >>> I; )\n                I++;\n              x = Math.ceil(w * I / 8), L = Math.ceil(x / 4), d = new ArrayBuffer(L * 4), y = new Uint8Array(d), y.set(new Uint8Array(t, e.ptr, x)), D = new Uint32Array(d), e.ptr += x, h >= 3 ? p = F.unstuffLUT2(c, s, U - 1, o, k, M) : p = F.unstuffLUT(c, s, U - 1, o, k, M), h >= 3 ? F.unstuff2(D, r, I, w, p) : F.unstuff(D, r, I, w, p);\n            } else\n              e.counter.bitstuffer++, I = s, e.ptr += n, I > 0 && (x = Math.ceil(w * I / 8), L = Math.ceil(x / 4), d = new ArrayBuffer(L * 4), y = new Uint8Array(d), y.set(new Uint8Array(t, e.ptr, x)), D = new Uint32Array(d), e.ptr += x, h >= 3 ? o == null ? F.originalUnstuff2(D, r, I, w) : F.unstuff2(D, r, I, w, !1, o, k, M) : o == null ? F.originalUnstuff(D, r, I, w) : F.unstuff(D, r, I, w, !1, o, k, M));\n          }\n        },\n        readTiles: function(t, e, r, o) {\n          var a = e.headerInfo, i = a.width, h = a.height, n = i * h, f = a.microBlockSize, v = a.imageType, u = A.getDataTypeSize(v), m = Math.ceil(i / f), g = Math.ceil(h / f);\n          e.pixels.numBlocksY = g, e.pixels.numBlocksX = m, e.pixels.ptr = 0;\n          var l = 0, s = 0, w = 0, k = 0, D = 0, d = 0, y = 0, x = 0, L = 0, p = 0, c = 0, U = 0, I = 0, M = 0, T = 0, V = 0, S, B, C, j, O, b, Q = new r(f * f), ne = h % f || f, ae = i % f || f, G, H, q = a.numDims, _, E = e.pixels.resultMask, z = e.pixels.resultPixels, fe = a.fileVersion, ee = fe >= 5 ? 14 : 15, Z, J = a.zMax, N;\n          for (w = 0; w < g; w++)\n            for (D = w !== g - 1 ? f : ne, k = 0; k < m; k++)\n              for (d = k !== m - 1 ? f : ae, c = w * i * f + k * f, U = i - d, _ = 0; _ < q; _++) {\n                if (q > 1 ? (N = z, c = w * i * f + k * f, z = new r(e.pixels.resultPixels.buffer, n * _ * u, n), J = a.maxValues[_]) : N = null, y = t.byteLength - e.ptr, S = new DataView(t, e.ptr, Math.min(10, y)), B = {}, V = 0, x = S.getUint8(0), V++, Z = a.fileVersion >= 5 ? x & 4 : 0, L = x >> 6 & 255, p = x >> 2 & ee, p !== (k * f >> 3 & ee) || Z && _ === 0)\n                  throw \"integrity issue\";\n                if (b = x & 3, b > 3)\n                  throw e.ptr += V, \"Invalid block encoding (\" + b + \")\";\n                if (b === 2) {\n                  if (Z)\n                    if (E)\n                      for (l = 0; l < D; l++)\n                        for (s = 0; s < d; s++)\n                          E[c] && (z[c] = N[c]), c++;\n                    else\n                      for (l = 0; l < D; l++)\n                        for (s = 0; s < d; s++)\n                          z[c] = N[c], c++;\n                  e.counter.constant++, e.ptr += V;\n                  continue;\n                } else if (b === 0) {\n                  if (Z)\n                    throw \"integrity issue\";\n                  if (e.counter.uncompressed++, e.ptr += V, I = D * d * u, M = t.byteLength - e.ptr, I = I < M ? I : M, C = new ArrayBuffer(I % u === 0 ? I : I + u - I % u), j = new Uint8Array(C), j.set(new Uint8Array(t, e.ptr, I)), O = new r(C), T = 0, E)\n                    for (l = 0; l < D; l++) {\n                      for (s = 0; s < d; s++)\n                        E[c] && (z[c] = O[T++]), c++;\n                      c += U;\n                    }\n                  else\n                    for (l = 0; l < D; l++) {\n                      for (s = 0; s < d; s++)\n                        z[c++] = O[T++];\n                      c += U;\n                    }\n                  e.ptr += T * u;\n                } else if (G = A.getDataTypeUsed(Z && v < 6 ? 4 : v, L), H = A.getOnePixel(B, V, G, S), V += A.getDataTypeSize(G), b === 3)\n                  if (e.ptr += V, e.counter.constantoffset++, E)\n                    for (l = 0; l < D; l++) {\n                      for (s = 0; s < d; s++)\n                        E[c] && (z[c] = Z ? Math.min(J, N[c] + H) : H), c++;\n                      c += U;\n                    }\n                  else\n                    for (l = 0; l < D; l++) {\n                      for (s = 0; s < d; s++)\n                        z[c] = Z ? Math.min(J, N[c] + H) : H, c++;\n                      c += U;\n                    }\n                else if (e.ptr += V, A.decodeBits(t, e, Q, H, _), V = 0, Z)\n                  if (E)\n                    for (l = 0; l < D; l++) {\n                      for (s = 0; s < d; s++)\n                        E[c] && (z[c] = Q[V++] + N[c]), c++;\n                      c += U;\n                    }\n                  else\n                    for (l = 0; l < D; l++) {\n                      for (s = 0; s < d; s++)\n                        z[c] = Q[V++] + N[c], c++;\n                      c += U;\n                    }\n                else if (E)\n                  for (l = 0; l < D; l++) {\n                    for (s = 0; s < d; s++)\n                      E[c] && (z[c] = Q[V++]), c++;\n                    c += U;\n                  }\n                else\n                  for (l = 0; l < D; l++) {\n                    for (s = 0; s < d; s++)\n                      z[c++] = Q[V++];\n                    c += U;\n                  }\n              }\n          q > 1 && !o && (e.pixels.resultPixels = A.swapDimensionOrder(e.pixels.resultPixels, n, q, r));\n        },\n        /*****************\n        *  private methods (helper methods)\n        *****************/\n        formatFileInfo: function(t) {\n          return {\n            fileIdentifierString: t.headerInfo.fileIdentifierString,\n            fileVersion: t.headerInfo.fileVersion,\n            imageType: t.headerInfo.imageType,\n            height: t.headerInfo.height,\n            width: t.headerInfo.width,\n            numValidPixel: t.headerInfo.numValidPixel,\n            microBlockSize: t.headerInfo.microBlockSize,\n            blobSize: t.headerInfo.blobSize,\n            maxZError: t.headerInfo.maxZError,\n            pixelType: A.getPixelType(t.headerInfo.imageType),\n            eofOffset: t.eofOffset,\n            mask: t.mask ? {\n              numBytes: t.mask.numBytes\n            } : null,\n            pixels: {\n              numBlocksX: t.pixels.numBlocksX,\n              numBlocksY: t.pixels.numBlocksY,\n              //\"numBytes\": data.pixels.numBytes,\n              maxValue: t.headerInfo.zMax,\n              minValue: t.headerInfo.zMin,\n              noDataValue: t.noDataValue\n            }\n          };\n        },\n        constructConstantSurface: function(t, e) {\n          var r = t.headerInfo.zMax, o = t.headerInfo.zMin, a = t.headerInfo.maxValues, i = t.headerInfo.numDims, h = t.headerInfo.height * t.headerInfo.width, n = 0, f = 0, v = 0, u = t.pixels.resultMask, m = t.pixels.resultPixels;\n          if (u)\n            if (i > 1) {\n              if (e)\n                for (n = 0; n < i; n++)\n                  for (v = n * h, r = a[n], f = 0; f < h; f++)\n                    u[f] && (m[v + f] = r);\n              else\n                for (f = 0; f < h; f++)\n                  if (u[f])\n                    for (v = f * i, n = 0; n < i; n++)\n                      m[v + i] = a[n];\n            } else\n              for (f = 0; f < h; f++)\n                u[f] && (m[f] = r);\n          else if (i > 1 && o !== r)\n            if (e)\n              for (n = 0; n < i; n++)\n                for (v = n * h, r = a[n], f = 0; f < h; f++)\n                  m[v + f] = r;\n            else\n              for (f = 0; f < h; f++)\n                for (v = f * i, n = 0; n < i; n++)\n                  m[v + n] = a[n];\n          else\n            for (f = 0; f < h * i; f++)\n              m[f] = r;\n        },\n        getDataTypeArray: function(t) {\n          var e;\n          switch (t) {\n            case 0:\n              e = Int8Array;\n              break;\n            case 1:\n              e = Uint8Array;\n              break;\n            case 2:\n              e = Int16Array;\n              break;\n            case 3:\n              e = Uint16Array;\n              break;\n            case 4:\n              e = Int32Array;\n              break;\n            case 5:\n              e = Uint32Array;\n              break;\n            case 6:\n              e = Float32Array;\n              break;\n            case 7:\n              e = Float64Array;\n              break;\n            default:\n              e = Float32Array;\n          }\n          return e;\n        },\n        getPixelType: function(t) {\n          var e;\n          switch (t) {\n            case 0:\n              e = \"S8\";\n              break;\n            case 1:\n              e = \"U8\";\n              break;\n            case 2:\n              e = \"S16\";\n              break;\n            case 3:\n              e = \"U16\";\n              break;\n            case 4:\n              e = \"S32\";\n              break;\n            case 5:\n              e = \"U32\";\n              break;\n            case 6:\n              e = \"F32\";\n              break;\n            case 7:\n              e = \"F64\";\n              break;\n            default:\n              e = \"F32\";\n          }\n          return e;\n        },\n        isValidPixelValue: function(t, e) {\n          if (e == null)\n            return !1;\n          var r;\n          switch (t) {\n            case 0:\n              r = e >= -128 && e <= 127;\n              break;\n            case 1:\n              r = e >= 0 && e <= 255;\n              break;\n            case 2:\n              r = e >= -32768 && e <= 32767;\n              break;\n            case 3:\n              r = e >= 0 && e <= 65536;\n              break;\n            case 4:\n              r = e >= -2147483648 && e <= 2147483647;\n              break;\n            case 5:\n              r = e >= 0 && e <= 4294967296;\n              break;\n            case 6:\n              r = e >= -34027999387901484e22 && e <= 34027999387901484e22;\n              break;\n            case 7:\n              r = e >= -17976931348623157e292 && e <= 17976931348623157e292;\n              break;\n            default:\n              r = !1;\n          }\n          return r;\n        },\n        getDataTypeSize: function(t) {\n          var e = 0;\n          switch (t) {\n            case 0:\n            case 1:\n              e = 1;\n              break;\n            case 2:\n            case 3:\n              e = 2;\n              break;\n            case 4:\n            case 5:\n            case 6:\n              e = 4;\n              break;\n            case 7:\n              e = 8;\n              break;\n            default:\n              e = t;\n          }\n          return e;\n        },\n        getDataTypeUsed: function(t, e) {\n          var r = t;\n          switch (t) {\n            case 2:\n            case 4:\n              r = t - e;\n              break;\n            case 3:\n            case 5:\n              r = t - 2 * e;\n              break;\n            case 6:\n              e === 0 ? r = t : e === 1 ? r = 2 : r = 1;\n              break;\n            case 7:\n              e === 0 ? r = t : r = t - 2 * e + 1;\n              break;\n            default:\n              r = t;\n              break;\n          }\n          return r;\n        },\n        getOnePixel: function(t, e, r, o) {\n          var a = 0;\n          switch (r) {\n            case 0:\n              a = o.getInt8(e);\n              break;\n            case 1:\n              a = o.getUint8(e);\n              break;\n            case 2:\n              a = o.getInt16(e, !0);\n              break;\n            case 3:\n              a = o.getUint16(e, !0);\n              break;\n            case 4:\n              a = o.getInt32(e, !0);\n              break;\n            case 5:\n              a = o.getUInt32(e, !0);\n              break;\n            case 6:\n              a = o.getFloat32(e, !0);\n              break;\n            case 7:\n              a = o.getFloat64(e, !0);\n              break;\n            default:\n              throw \"the decoder does not understand this pixel type\";\n          }\n          return a;\n        },\n        swapDimensionOrder: function(t, e, r, o, a) {\n          var i = 0, h = 0, n = 0, f = 0, v = t;\n          if (r > 1)\n            if (v = new o(e * r), a)\n              for (i = 0; i < e; i++)\n                for (f = i, n = 0; n < r; n++, f += e)\n                  v[f] = t[h++];\n            else\n              for (i = 0; i < e; i++)\n                for (f = i, n = 0; n < r; n++, f += e)\n                  v[h++] = t[f];\n          return v;\n        }\n      }, X = function(t, e, r) {\n        this.val = t, this.left = e, this.right = r;\n      }, R = {\n        /*\n        * ********removed options compared to LERC1. We can bring some of them back if needed.\n         * removed pixel type. LERC2 is typed and doesn't require user to give pixel type\n         * changed encodedMaskData to maskData. LERC2 's js version make it faster to use maskData directly.\n         * removed returnMask. mask is used by LERC2 internally and is cost free. In case of user input mask, it's returned as well and has neglible cost.\n         * removed nodatavalue. Because LERC2 pixels are typed, nodatavalue will sacrify a useful value for many types (8bit, 16bit) etc,\n         *       user has to be knowledgable enough about raster and their data to avoid usability issues. so nodata value is simply removed now.\n         *       We can add it back later if their's a clear requirement.\n         * removed encodedMask. This option was not implemented in LercDecode. It can be done after decoding (less efficient)\n         * removed computeUsedBitDepths.\n         *\n         *\n         * response changes compared to LERC1\n         * 1. encodedMaskData is not available\n         * 2. noDataValue is optional (returns only if user's noDataValue is with in the valid data type range)\n         * 3. maskData is always available\n        */\n        /*****************\n        *  public properties\n        ******************/\n        //HUFFMAN_LUT_BITS_MAX: 12, //use 2^12 lut, not configurable\n        /*****************\n        *  public methods\n        *****************/\n        /**\n         * Decode a LERC2 byte stream and return an object containing the pixel data and optional metadata.\n         *\n         * @param {ArrayBuffer} input The LERC input byte stream\n         * @param {object} [options] options Decoding options\n         * @param {number} [options.inputOffset] The number of bytes to skip in the input byte stream. A valid LERC file is expected at that position\n         * @param {boolean} [options.returnFileInfo] If true, the return value will have a fileInfo property that contains metadata obtained from the LERC headers and the decoding process\n         * @param {boolean} [options.returnPixelInterleavedDims]  If true, returned dimensions are pixel-interleaved, a.k.a [p1_dim0, p1_dim1, p1_dimn, p2_dim0...], default is [p1_dim0, p2_dim0, ..., p1_dim1, p2_dim1...]\n         */\n        decode: function(t, e) {\n          e = e || {};\n          var r = e.noDataValue, o = 0, a = {};\n          if (a.ptr = e.inputOffset || 0, a.pixels = {}, !!A.readHeaderInfo(t, a)) {\n            var i = a.headerInfo, h = i.fileVersion, n = A.getDataTypeArray(i.imageType);\n            if (h > 5)\n              throw \"unsupported lerc version 2.\" + h;\n            A.readMask(t, a), i.numValidPixel !== i.width * i.height && !a.pixels.resultMask && (a.pixels.resultMask = e.maskData);\n            var f = i.width * i.height;\n            a.pixels.resultPixels = new n(f * i.numDims), a.counter = {\n              onesweep: 0,\n              uncompressed: 0,\n              lut: 0,\n              bitstuffer: 0,\n              constant: 0,\n              constantoffset: 0\n            };\n            var v = !e.returnPixelInterleavedDims;\n            if (i.numValidPixel !== 0)\n              if (i.zMax === i.zMin)\n                A.constructConstantSurface(a, v);\n              else if (h >= 4 && A.checkMinMaxRanges(t, a))\n                A.constructConstantSurface(a, v);\n              else {\n                var u = new DataView(t, a.ptr, 2), m = u.getUint8(0);\n                if (a.ptr++, m)\n                  A.readDataOneSweep(t, a, n, v);\n                else if (h > 1 && i.imageType <= 1 && Math.abs(i.maxZError - 0.5) < 1e-5) {\n                  var g = u.getUint8(1);\n                  if (a.ptr++, a.encodeMode = g, g > 2 || h < 4 && g > 1)\n                    throw \"Invalid Huffman flag \" + g;\n                  g ? A.readHuffman(t, a, n, v) : A.readTiles(t, a, n, v);\n                } else\n                  A.readTiles(t, a, n, v);\n              }\n            a.eofOffset = a.ptr;\n            var l;\n            e.inputOffset ? (l = a.headerInfo.blobSize + e.inputOffset - a.ptr, Math.abs(l) >= 1 && (a.eofOffset = e.inputOffset + a.headerInfo.blobSize)) : (l = a.headerInfo.blobSize - a.ptr, Math.abs(l) >= 1 && (a.eofOffset = a.headerInfo.blobSize));\n            var s = {\n              width: i.width,\n              height: i.height,\n              pixelData: a.pixels.resultPixels,\n              minValue: i.zMin,\n              maxValue: i.zMax,\n              validPixelCount: i.numValidPixel,\n              dimCount: i.numDims,\n              dimStats: {\n                minValues: i.minValues,\n                maxValues: i.maxValues\n              },\n              maskData: a.pixels.resultMask\n              //noDataValue: noDataValue\n            };\n            if (a.pixels.resultMask && A.isValidPixelValue(i.imageType, r)) {\n              var w = a.pixels.resultMask;\n              for (o = 0; o < f; o++)\n                w[o] || (s.pixelData[o] = r);\n              s.noDataValue = r;\n            }\n            return a.noDataValue = r, e.returnFileInfo && (s.fileInfo = A.formatFileInfo(a)), s;\n          }\n        },\n        getBandCount: function(t) {\n          var e = 0, r = 0, o = {};\n          for (o.ptr = 0, o.pixels = {}; r < t.byteLength - 58; )\n            A.readHeaderInfo(t, o), r += o.headerInfo.blobSize, e++, o.ptr = r;\n          return e;\n        }\n      };\n      return R;\n    }(), W = function() {\n      var F = new ArrayBuffer(4), A = new Uint8Array(F), X = new Uint32Array(F);\n      return X[0] = 1, A[0] === 1;\n    }(), P = {\n      /************wrapper**********************************************/\n      /**\n       * A wrapper for decoding both LERC1 and LERC2 byte streams capable of handling multiband pixel blocks for various pixel types.\n       *\n       * @alias module:Lerc\n       * @param {ArrayBuffer} input The LERC input byte stream\n       * @param {object} [options] The decoding options below are optional.\n       * @param {number} [options.inputOffset] The number of bytes to skip in the input byte stream. A valid Lerc file is expected at that position.\n       * @param {string} [options.pixelType] (LERC1 only) Default value is F32. Valid pixel types for input are U8/S8/S16/U16/S32/U32/F32.\n       * @param {number} [options.noDataValue] (LERC1 only). It is recommended to use the returned mask instead of setting this value.\n       * @param {boolean} [options.returnPixelInterleavedDims] (nDim LERC2 only) If true, returned dimensions are pixel-interleaved, a.k.a [p1_dim0, p1_dim1, p1_dimn, p2_dim0...], default is [p1_dim0, p2_dim0, ..., p1_dim1, p2_dim1...]\n       * @returns {{width, height, pixels, pixelType, mask, statistics}}\n         * @property {number} width Width of decoded image.\n         * @property {number} height Height of decoded image.\n         * @property {array} pixels [band1, band2, …] Each band is a typed array of width*height.\n         * @property {string} pixelType The type of pixels represented in the output.\n         * @property {mask} mask Typed array with a size of width*height, or null if all pixels are valid.\n         * @property {array} statistics [statistics_band1, statistics_band2, …] Each element is a statistics object representing min and max values\n      **/\n      decode: function(F, A) {\n        if (!W)\n          throw \"Big endian system is not supported.\";\n        A = A || {};\n        var X = A.inputOffset || 0, R = new Uint8Array(F, X, 10), t = String.fromCharCode.apply(null, R), e, r;\n        if (t.trim() === \"CntZImage\")\n          e = Y, r = 1;\n        else if (t.substring(0, 5) === \"Lerc2\")\n          e = K, r = 2;\n        else\n          throw \"Unexpected file identifier string: \" + t;\n        for (var o = 0, a = F.byteLength - 10, i, h = [], n, f, v = {\n          width: 0,\n          height: 0,\n          pixels: [],\n          pixelType: A.pixelType,\n          mask: null,\n          statistics: []\n        }, u = 0; X < a; ) {\n          var m = e.decode(F, {\n            inputOffset: X,\n            //for both lerc1 and lerc2\n            encodedMaskData: i,\n            //lerc1 only\n            maskData: f,\n            //lerc2 only\n            returnMask: o === 0,\n            //lerc1 only\n            returnEncodedMask: o === 0,\n            //lerc1 only\n            returnFileInfo: !0,\n            //for both lerc1 and lerc2\n            returnPixelInterleavedDims: A.returnPixelInterleavedDims,\n            //for ndim lerc2 only\n            pixelType: A.pixelType || null,\n            //lerc1 only\n            noDataValue: A.noDataValue || null\n            //lerc1 only\n          });\n          X = m.fileInfo.eofOffset, f = m.maskData, o === 0 && (i = m.encodedMaskData, v.width = m.width, v.height = m.height, v.dimCount = m.dimCount || 1, v.pixelType = m.pixelType || m.fileInfo.pixelType, v.mask = f), r > 1 && (f && h.push(f), m.fileInfo.mask && m.fileInfo.mask.numBytes > 0 && u++), o++, v.pixels.push(m.pixelData), v.statistics.push({\n            minValue: m.minValue,\n            maxValue: m.maxValue,\n            noDataValue: m.noDataValue,\n            dimStats: m.dimStats\n          });\n        }\n        var g, l, s;\n        if (r > 1 && u > 1) {\n          for (s = v.width * v.height, v.bandMasks = h, f = new Uint8Array(s), f.set(h[0]), g = 1; g < h.length; g++)\n            for (n = h[g], l = 0; l < s; l++)\n              f[l] = f[l] & n[l];\n          v.maskData = f;\n        }\n        return v;\n      }\n    };\n    $.exports ? $.exports = P : this.Lerc = P;\n  })();\n})(ie);\nvar ue = ie.exports;\nconst ve = /* @__PURE__ */ se(ue);\nclass we extends le {\n  constructor(Y) {\n    super(), this.planarConfiguration = typeof Y.PlanarConfiguration < \"u\" ? Y.PlanarConfiguration : 1, this.samplesPerPixel = typeof Y.SamplesPerPixel < \"u\" ? Y.SamplesPerPixel : 1, this.addCompression = Y.LercParameters[oe.AddCompression];\n  }\n  decodeBlock(Y) {\n    switch (this.addCompression) {\n      case re.None:\n        break;\n      case re.Deflate:\n        Y = te(new Uint8Array(Y)).buffer;\n        break;\n      default:\n        throw new Error(`Unsupported LERC additional compression method identifier: ${this.addCompression}`);\n    }\n    return ve.decode(Y, { returnPixelInterleavedDims: this.planarConfiguration === 1 }).pixels[0].buffer;\n  }\n}\nexport {\n  we as default\n};\n"],"names":["$","ie","exports","Y","F","r","o","a","encodedMaskData","i","t","inputOffset","h","noDataValue","defaultNoDataValue","n","A","pixelType","Float32Array","returnMask","f","width","height","pixelData","resultPixels","minValue","maxValue","pixels","resultMask","maskData","returnEncodedMask","mask","bitset","returnFileInfo","fileInfo","X","computeUsedBitDepths","bitDepths","R","s","w","k","numBlocksX","v","numBlocksY","u","Math","floor","m","g","maxZError","l","Number","MAX_VALUE","Uint8Array","d","y","D","x","L","p","c","T","V","S","B","U","I","M","blocks","encoding","rawData","e","stuffedData","bitsPerPixel","numValidPixels","offset","fileIdentifierString","fileVersion","imageType","eofOffset","numBytes","float32","Object","keys","String","fromCharCode","apply","trim","DataView","getInt32","getUint32","getFloat64","getFloat32","ceil","getInt16","getUint8","length","Array","byteLength","min","offsetType","getInt8","numValidPixelsType","getUint16","ArrayBuffer","set","Uint32Array","K","unshift","HUFFMAN_LUT_BITS_MAX","computeChecksumFletcher32","readHeaderInfo","ptr","lastIndexOf","checksum","numDims","numValidPixel","microBlockSize","blobSize","zMin","zMax","headerInfo","this","checkMinMaxRanges","getDataTypeArray","getDataTypeSize","readSubArray","minValues","maxValues","readMask","readDataOneSweep","swapDimensionOrder","readHuffmanTree","decodeBits","first","second","max","C","right","left","val","decodeLut","numBitsLUTQick","numBitsLUT","tree","srcPtr","bitPos","readHuffman","b","encodeMode","j","O","buffer","counter","lut","bitstuffer","readTiles","G","H","_","Z","N","Q","ne","ae","q","E","z","ee","J","uncompressed","getDataTypeUsed","getOnePixel","constantoffset","constant","formatFileInfo","getPixelType","constructConstantSurface","Int8Array","Int16Array","Uint16Array","Int32Array","Float64Array","isValidPixelValue","getUInt32","decode","onesweep","returnPixelInterleavedDims","abs","validPixelCount","dimCount","dimStats","getBandCount","W","P","substring","statistics","push","bandMasks","Lerc","ue","ve","se","we","le","constructor","super","planarConfiguration","PlanarConfiguration","samplesPerPixel","SamplesPerPixel","addCompression","LercParameters","oe","AddCompression","decodeBlock","re","None","Deflate","te","Error"],"sourceRoot":""}