from django.shortcuts import render
from django.http import HttpResponseRedirect, JsonResponse

from omeroweb.webclient.decorators import login_required

from .forms import ConfigForm
from .utils import get_attached_configs, create_config, attach_config
from .utils import get_files_images, build_viewer_url
from .utils import process_rois, make_cell_json

from omeroweb.settings import ADDITIONAL_APPS

# Check if omero_web_zarr is installed and configured
# If "omero_web_zarr" is included in ADDITIONAL_APPS but
# not installed omero web would not start, so no need to check
OMERO_WEB_ZARR = "omero_web_zarr" in ADDITIONAL_APPS


@login_required()
def vitessce_index(request, conn=None, **kwargs):
    """Render the basic index page for the app
    """
    return render(request, "omero_vitessce/index.html")


@login_required()
def vitessce_panel(request, obj_type, obj_id, conn=None, **kwargs):
    """Get all .json attachements and generate links for them
    This way the config files can be served as text
    to the config argument of the vitessce webapp
    """
    obj_id = int(obj_id)

    config_files, config_urls = get_attached_configs(obj_type, obj_id, conn)

    context = {"json_configs": dict(zip(config_files, config_urls)),
               "obj_type": obj_type, "obj_id": obj_id}

    if OMERO_WEB_ZARR:
        files, urls, img_files, img_urls, _ = get_files_images(
                obj_type, obj_id, conn)
        form = ConfigForm(file_names=files, file_urls=urls,
                          img_names=img_files, img_urls=img_urls)
        context["form"] = form
    else:
        context["form"] = None

    return render(request, "omero_vitessce/vitessce_panel.html", context)


@login_required(setGroupContext=True)
def generate_config(request, obj_type, obj_id, conn=None, **kwargs):
    """Generate a config file for the selected image/dataset,
    write it to a temporarily file and attach it. Then open the
    viewer with the autogenerated config.
    """
    obj_id = int(obj_id)
    vitessce_config = create_config(request.POST, obj_type, obj_id, conn)

    config_filename = request.POST.get("config_file_name")
    config_id = attach_config(vitessce_config, obj_type,
                              obj_id, config_filename, conn)
    viewer_url = build_viewer_url(config_id)

    return HttpResponseRedirect(viewer_url)


@login_required()
def vitessce_json_rois(request, img_ids, conn=None, **kwargs):
    """Generate a json response with the polygon coordinates of the
    vertices of the ROIs on the given images.
    """
    img_ids = [int(img_id) for img_id in img_ids.split(",")]
    shapes = process_rois(img_ids, conn)
    cell_dict = make_cell_json(shapes)
    return JsonResponse(cell_dict)


@login_required()
def vitessce_open(request, conn=None, **kwargs):
    """Get the first .json attachement and generate a link for it
    This way the config files can be served as text
    If no config files are present send to the panel html to ask to make one
    """
    if request.GET.get("dataset") is not None:
        obj_type = "dataset"
        obj_id = int(request.GET.get("dataset"))
    if request.GET.get("image") is not None:
        obj_type = "image"
        obj_id = int(request.GET.get("image"))

    _, config_urls = get_attached_configs(obj_type, obj_id, conn)

    if len(config_urls) > 0:
        return HttpResponseRedirect(config_urls[0])
    else:
        context = {"json_configs": dict(),
                   "obj_type": obj_type, "obj_id": obj_id}
    if OMERO_WEB_ZARR:
        files, urls, img_files, img_urls, _ = get_files_images(
                obj_type, obj_id, conn)
        form = ConfigForm(file_names=files, file_urls=urls,
                          img_names=img_files, img_urls=img_urls)
        context["form"] = form
    else:
        context["form"] = None
    return render(request, "omero_vitessce/vitessce_open_with.html", context)
